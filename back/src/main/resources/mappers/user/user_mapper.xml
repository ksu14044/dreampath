<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.korit.dreampath_back.mapper.UserMapper">
    <resultMap id="roleResultMap" type="com.korit.dreampath_back.entity.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
    </resultMap>

    <resultMap id="userRoleResultMap" type="com.korit.dreampath_back.entity.UserRole">
        <id property="userRoleId" column="user_role_id" />
        <result property="userId" column="urt_user_id" />
        <result property="roleId" column="urt_role_id" />
        <association property="role" resultMap="roleResultMap" />
    </resultMap>

    <resultMap id="userResultMap" type="com.korit.dreampath_back.entity.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="email" column="email" />
        <result property="nickname" column="nickname" />
        <result property="roleName" column="role_name" />
        <result property="phoneNumber" column="phone_number" />
        <result property="profileImg" column="profile_img" />
        <result property="ticketId" column="ticket_id" />
        <result property="oAuth2Name" column="oauth2_name" />
        <result property="oAuth2Provider" column="oauth2_provider" />
        <result property="remaining" column="remaining" />
        <result property="remainPoint" column="remain_point" />
        <result property="starPoint" column="star_point" />
        <result property="accountExpired" column="account_expired" />
        <result property="accountLocked" column="account_locked" />
        <result property="credentialsExpired" column="credentials_expired" />
        <result property="accountEnabled" column="account_enabled" />
        <result property="createdAt" column="created_at" />
        <collection property="userRoles" javaType="java.util.Set" resultMap="userRoleResultMap" />
    </resultMap>

    <update id="updateProfileImgById">
        update user_tb
        set
            profile_img = #{profileImg}
        where
            user_id = #{userId}
    </update>

    <update id="updateNicknameById">
        update user_tb
        set
            nickname = #{nickname}
        where
            user_id = #{userId}
    </update>

    <update id="updatePasswordById">
        update user_tb
        set
            password = #{password}
        where
            user_id = #{userId}
    </update>

    <update id="updateEmailById">
        update user_tb
        set
            email = #{email}
        where
            user_id = #{userId}
    </update>

    <update id="updateRemainingCount">
        update user_tb
        set
            remaining = remaining - 1
        where
            user_id = #{userId}
    </update>
    <update id="updateRemainPoint">
        update user_tb
        set remain_point = remain_point - #{price}
        where user_id = #{userId}
    </update>
    <update id="updateRemaining">
        update user_tb
        set remaining = remaining + #{entryCount}
        where user_id = #{userId}
    </update>

    <update id="updatePointRemainingCount">
        update user_tb
        set remain_point = remain_point + #{amount}
        where user_id = #{userId}
    </update>

    <update id="updatePhoneNumber">
        update user_tb
        set phone_number = #{phoneNumber}
        where user_id = #{userId}

    </update>

    <update id="updateUserStarPointAvgByPostId">
        update user_tb
        set star_point = #{userStarPoint}
        where user_id = #{userId}
    </update>

    <delete id="deleteUserById">
        delete
        from
            user_tb
        where
            user_id = #{userId}

    </delete>

    <select id="getUserStarPointAvg" resultType="java.lang.Double">
        select
            ROUND(avg(ct.star_point), 1)
        from
            comment_tb ct
            left outer join post_tb pt on (ct.post_id = pt.post_id)
        where
            pt.user_id = #{userId}
        and
            ct.star_point > 0
        group by pt.user_id;
    </select>



    <insert id="insert" useGeneratedKeys="true" keyProperty="userId">
        insert into user_tb
        values(
        default,
        #{username},
        #{password},
        #{email},
        #{nickname},
        #{phoneNumber},
        #{profileImg},
        #{ticketId},
        #{oAuth2Name},
        #{oAuth2Provider},
        #{remaining},
        #{starPoint},
        #{remainPoint},
        1,
        1,
        1,
        1,
        now()
        )
    </insert>

    <select id="selectById" resultMap="userResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.email,
            ut.nickname,
            ut.oauth2_name,
            ut.remaining,
            ut.remain_point,
            ut.star_point,
            ut.oauth2_provider,
            ut.profile_img,
            ut.account_expired,
            ut.account_locked,
            ut.credentials_expired,
            ut.account_enabled,
            ut.created_at,

            urt.user_role_id,
            urt.user_id as urt_user_id,
            urt.role_id as urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.user_id = #{userId}
    </select>


    <select id="selectByUsername" resultMap="userResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.email,
            ut.nickname,
            ut.oauth2_name,
            ut.oauth2_provider,
            ut.profile_img,
            ut.account_expired,
            ut.account_locked,
            ut.credentials_expired,
            ut.account_enabled,
            ut.created_at,

            urt.user_role_id,
            urt.user_id as urt_user_id,
            urt.role_id as urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on (urt.user_id = ut.user_id)
            left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
            ut.username = #{username}
    </select>

    <select id="selectByPassword" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.password = #{password}
    </select>

    <select id="selectByNickname" resultMap="userResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.email,
            ut.nickname,
            ut.oauth2_name,
            ut.oauth2_provider,
            ut.profile_img,
            ut.account_expired,
            ut.account_locked,
            ut.credentials_expired,
            ut.account_enabled,
            ut.created_at,

            urt.user_role_id,
            urt.user_id as urt_user_id,
            urt.role_id as urt_role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on (urt.user_id = ut.user_id)
            left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
            ut.nickname = #{nickname}
    </select>

    <select id="selectByEmail" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.email = #{email}
    </select>

    <select id="selectByPhoneNumber" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.phoneNumber = #{phoneNumber}
    </select>

    <select id="selectByAccountNumber" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.accountNumber = #{accountNumber}
    </select>

    <select id="selectByAddress" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.nickname = #{address}
    </select>

    <select id="selectByProfileImg" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.profileImg = #{profileImg}
    </select>

    <select id="selectByTicketId" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.ticketId = #{ticketId}
    </select>

    <select id="selectByStarPoint" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.starpoint = #{starpoint}
    </select>

    <select id="selectByRoleList" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.roleList = #{roleList}
    </select>

    <select id="findAllMyMentoring" resultType="com.korit.dreampath_back.entity.MyMentoringSearch">
        select
            pt.status as status,
            pt.title as title,
            pt.created_at as createdAt,
            (select count(*) from comment_tb ct where ct.post_id = pt.post_id) as commentCount,
            (select count(*) from post_like_tb plt where plt.post_id = pt.post_id) as likeCount,
            pt.view_count as viewCount,
            pt.post_id as postId
        from
            post_tb pt
        where
            pt.user_id = #{userId}
            <if test ="searchText != null and searchText != ''">
                and pt.title like concat("%", #{searchText}, "%")
            </if>
            and pt.board_id = 1
        order by
            <choose>
                <when test="order == 'asc'">
                    post_id asc,
                </when>
            </choose>
            post_id desc
        limit #{startIndex}, #{limitCount}
    </select>

    <select id="getMyMentoringListCountBySearchText" resultType="java.lang.Integer">
        select
            count(*)
        from
            post_tb
        <where>
            user_id = #{userId}
            <if test="searchText != null and searchText != ''">
                and title like concat("%", #{searchText}, "%")
            </if>
            and board_id = 1
        </where>
    </select>

    <select id="selectByRolename" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.role_name,
        ut.email,
        ut.nickname,
        ut.oauth2_name,
        ut.oauth2_provider,
        ut.profile_img,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,
        ut.created_at,

        urt.user_role_id,
        urt.user_id as urt_user_id,
        urt.role_id as urt_role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on (urt.user_id = ut.user_id)
        left outer join role_tb rt on (rt.role_id = urt.role_id)
        where
        ut.role_name = #{roleName}
    </select>
    <select id="getUserIdByPostId" resultType="java.lang.Integer">
        select
            user_id
        from
            post_tb
        where
            post_id = #{postId}
    </select>


</mapper>